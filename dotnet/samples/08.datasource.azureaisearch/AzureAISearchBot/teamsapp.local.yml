# yaml-language-server: $schema=https://aka.ms/teams-toolkit/1.1.0/yaml.schema.json
#
# The teamsapp.local.yml composes automation tasks for Teams Toolkit when running locally.
# This file is used when selecting 'Prepare Teams App Dependencies' menu items in the Teams Toolkit for Visual Studio window
#
# You can customize this file. Visit https://aka.ms/teamsfx-v5.0-guide for more info about Teams Toolkit project files.
version: 1.1.0

# Defines what the `provision` lifecycle step does with Teams Toolkit.
provision:
  # Automates the creation of a Teams app registration and saves the App ID to an environment file.
  - uses: teamsApp/create
    with:
      # Teams app name
      name: aisearch-${{TEAMSFX_ENV}}
    # Write the information of created resources into environment file for
    # the specified environment variable(s).
    writeToEnvironmentFile: 
      teamsAppId: TEAMS_APP_ID

  # Automates the creation an Azure AD app registration which is required for a bot.
  # The Bot ID (AAD app client ID) and Bot Password (AAD app client secret) are saved to an environment file.
  - uses: botAadApp/create
    with:
      # The Azure Active Directory application's display name
      name: aisearch
    writeToEnvironmentFile:
      # The Azure Active Directory application's client id created for bot.
      botId: BOT_ID
      # The Azure Active Directory application's client secret created for bot.
      botPassword: SECRET_BOT_PASSWORD 
  # Automates the creation and configuration of a Bot Framework registration which is required for a bot.
  # This configures the bot to use the Azure AD app registration created in the previous step.
  - uses: botFramework/create
    with:
      botId: ${{BOT_ID}}
      name: aisearch
      messagingEndpoint: ${{BOT_ENDPOINT}}/api/messages
      description: ""
      channels:
        - name: msteams

  # Generate runtime appsettings to JSON file
  - uses: file/createOrUpdateJsonFile
    with:
      target: ./appsettings.Development.json
      content:
        BOT_ID: ${{BOT_ID}}
        BOT_PASSWORD: ${{SECRET_BOT_PASSWORD}}

  # Optional: Automates schema and error checking of the Teams app manifest and outputs the results in the console.
  - uses: teamsApp/validateManifest
    with:
      # Path to manifest template
      manifestPath: ./appPackage/manifest.json

  # Automates the creation of a Teams app package (.zip).
  - uses: teamsApp/zipAppPackage
    with:
      # Path to manifest template
      manifestPath: ./appPackage/manifest.json
      outputZipPath: ./appPackage/build/appPackage.${{TEAMSFX_ENV}}.zip
      outputJsonPath: ./appPackage/build/manifest.${{TEAMSFX_ENV}}.json

  # Automates updating the Teams app manifest in Teams Developer Portal using the App ID from the mainfest file.
  # This action ensures that any manifest changes are reflected when launching the app again in Teams.
  - uses: teamsApp/update
    with:
      # Relative path to this file. This is the path for built zip file.
      appPackagePath: ./appPackage/build/appPackage.${{TEAMSFX_ENV}}.zip

  # Create or update debug profile in lauchsettings file
  - uses: file/createOrUpdateJsonFile
    with:
      target: ./Properties/launchSettings.json
      content:
        profiles:
          Microsoft Teams (browser):
            commandName: "Project"
            dotnetRunMessages: true
            launchBrowser: true
            launchUrl: "https://teams.microsoft.com/l/app/${{TEAMS_APP_ID}}?installAppPackage=true&webjoin=true&appTenantId=${{TEAMS_APP_TENANT_ID}}&login_hint=${{TEAMSFX_M365_USER_NAME}}"
            applicationUrl: "http://localhost:5130"
            environmentVariables:
              ASPNETCORE_ENVIRONMENT: "Development"
            hotReloadProfile: "aspnetcore"
