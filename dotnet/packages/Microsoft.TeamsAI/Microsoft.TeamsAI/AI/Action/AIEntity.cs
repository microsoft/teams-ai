using Microsoft.Bot.Schema;
using Newtonsoft.Json;

namespace Microsoft.Teams.AI.AI.Action
{
    /// <summary>
    /// The citations's AIEntity.
    /// </summary>
    public class AIEntity : Entity
    {
        /// <summary>
        /// Required. Must be "https://schema.org/Message"
        /// </summary>
        [JsonProperty(PropertyName = "type")]
        public new string Type = "https://schema.org/Message";

        /// <summary>
        /// Required. Must be "Message".
        /// </summary>
        [JsonProperty(PropertyName = "@type")]
        public string AtType = "Message";

        /// <summary>
        /// Required. Must be "https://schema.org"
        /// </summary>
        [JsonProperty(PropertyName = "@context")]
        public string AtContext = "https://schema.org";

        /// <summary>
        /// Must be left blank. This is for Bot Framework's schema.
        /// </summary>
        [JsonProperty(PropertyName = "@id")]
        public string AtId = "";

        /// <summary>
        /// Indicate that the content was generated by AI.
        /// </summary>
        [JsonProperty(PropertyName = "additionalType")]
        public List<string> AdditionalType = new() { "AIGeneratedContent" };

        /// <summary>
        /// Optional. If the citation object is included, then the sent activity will include citations that are referenced in the activity text.
        /// </summary>
        [JsonProperty(PropertyName = "citation")]
        public List<ClientCitation> Citation { get; set; } = new();

        /// <summary>
        /// Optional sensitivity content information.
        /// </summary>
        [JsonProperty(PropertyName = "usageInfo")]
        public SensitivityUsageInfo? UsageInfo { get; set; }
    }

    /// <summary>
    /// The client citation.
    /// </summary>
    public class ClientCitation
    {
        /// <summary>
        /// Required. Must be "Claim".
        /// </summary>
        [JsonProperty(PropertyName = "@type")]
        public string AtType = "Claim";

        /// <summary>
        /// Required. Number and position of the citation.
        /// </summary>
        [JsonProperty(PropertyName = "position")]
        public int Position { get; set; }

        /// <summary>
        /// The citation's appearance.
        /// </summary>
        [JsonProperty(PropertyName = "appearance")]
        public ClientCitationAppearance? Appearance { get; set; }

    }

    /// <summary>
    /// The client citation appearance.
    /// </summary>
    public class ClientCitationAppearance
    {
        /// <summary>
        /// Required. Must be "DigitalDocument"
        /// </summary>
        [JsonProperty(PropertyName = "@type")]
        public string AtType = "DigitalDocument";

        /// <summary>
        /// Name of the document (max length 80).
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; } = string.Empty;

        /// <summary>
        /// Optional. The citation appearance text.
        /// </summary>
        [JsonProperty(PropertyName = "text")]
        public string? Text { get; set; }

        /// <summary>
        /// URL of the document. This will make the name of the citation clickable and direct the user to the specified URL.
        /// </summary>
        [JsonProperty(PropertyName = "url")]
        public string? Url { get; set; }

        /// <summary>
        /// Extract of the referenced content (max length 160).
        /// </summary>
        [JsonProperty(PropertyName = "abstract")]
        public string Abstract { get; set; } = string.Empty;

        /// <summary>
        /// Optional. Encoding format of the `citation.appearance.text` field. 
        /// It should be one of "text/html" or "application/vnd.microsoft.card.adaptive".
        /// </summary>
        [JsonProperty(PropertyName = "encodingFormat")]
        public string? EncodingFormat { get; set; }

        /// <summary>
        /// The icon provided in the citation ui.
        /// </summary>
        [JsonProperty(PropertyName = "image")]
        public AppearanceImage? Image { get; set; }

        /// <summary>
        /// Optional. Set the keywords.
        /// </summary>
        [JsonProperty(PropertyName = "keywords")]
        public List<string>? Keywords { get; set; }

        /// <summary>
        /// Optional sensitivity content information.
        /// </summary>
        [JsonProperty(PropertyName = "usageInfo")]
        public SensitivityUsageInfo? UsageInfo { get; set; }
    }

    /// <summary>
    /// The sensitivity usage info.
    /// </summary>
    public class SensitivityUsageInfo
    {
        /// <summary>
        /// Must be "https://schema.org/Message"
        /// </summary>
        [JsonProperty(PropertyName = "type")]
        public string Type = "https://schema.org/Message";

        /// <summary>
        /// Required. Set to "CreativeWork".
        /// </summary>
        [JsonProperty(PropertyName = "@type")]
        public string AtType = "CreativeWork";

        /// <summary>
        /// Sensitivity description of the content.
        /// </summary>
        [JsonProperty(PropertyName = "description")]
        public string? Description { get; set; }

        /// <summary>
        /// Sensitivity title of the content.
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string? Name { get; set; }

        /// <summary>
        /// Optional. Ignored in Teams
        /// </summary>
        [JsonProperty(PropertyName = "position")]
        public int Position { get; set; }

        /// <summary>
        /// The sensitivity usage info pattern.
        /// </summary>
        [JsonProperty(PropertyName = "pattern")]
        public SensitivityUsageInfoPattern? Pattern;
    }

    /// <summary>
    /// The sensitivity usage info pattern.
    /// </summary>
    public class SensitivityUsageInfoPattern
    {
        /// <summary>
        /// Set to "DefinedTerm".
        /// </summary>
        [JsonProperty(PropertyName = "@type")]
        public string AtType = "DefinedTerm";

        /// <summary>
        /// Whether it's in a defined term set.
        /// </summary>
        [JsonProperty(PropertyName = "inDefinedTermSet")]
        public string? inDefinedTermSet { get; set; }

        /// <summary>
        /// The color.
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string? Name { get; set; }

        /// <summary>
        /// For example `#454545`.
        /// </summary>
        [JsonProperty(PropertyName = "termCode")]
        public string? TermCode { get; set; }
    }

    /// <summary>
    /// Represents how the citation will be rendered.
    /// </summary>
    public class AppearanceImage
    {
        /// <summary>
        /// Required. Must be "ImageObject".
        /// </summary>
        [JsonProperty(PropertyName = "@type")]
        public string Type { get; set; } = "ImageObject";

        /// <summary>
        /// The image/icon name. It should be one of <see cref="ClientCitationIconName"/>
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; } = string.Empty;
    }

    /// <summary>
    /// Represents the different possible values for the client citation icon name.
    /// </summary>
    public static class ClientCitationIconName
    {
        /// <summary>
        /// Represents the Microsoft Word icon name.
        /// </summary>
        public static readonly string MicrosoftWord = "Microsoft Word";

        /// <summary>
        /// Represents the Microsoft Excel icon name.
        /// </summary>
        public static readonly string MicrosoftExcel = "Microsoft Excel";

        /// <summary>
        /// Represents the Microsoft PowerPoint icon name.
        /// </summary>
        public static readonly string MicrosoftPowerPoint = "Microsoft PowerPoint";

        /// <summary>
        /// Represents the Microsoft Visio icon name.
        /// </summary>
        public static readonly string MicrosoftVisio = "Microsoft Visio";

        /// <summary>
        /// Represents the Microsoft Loop icon name.
        /// </summary>
        public static readonly string MicrosoftLoop = "Microsoft Loop";

        /// <summary>
        /// Represents the Microsoft Whiteboard icon name.
        /// </summary>
        public static readonly string MicrosoftWhiteboard = "Microsoft Whiteboard";

        /// <summary>
        /// Represents the Adobe Illustrator icon name.
        /// </summary>
        public static readonly string AdobeIllustrator = "Adobe Illustrator";

        /// <summary>
        /// Represents the Adobe Photoshop icon name.
        /// </summary>
        public static readonly string AdobePhotoshop = "Adobe Photoshop";

        /// <summary>
        /// Represents the Adobe InDesign icon name.
        /// </summary>
        public static readonly string AdobeInDesign = "Adobe InDesign";

        /// <summary>
        /// Represents the Adobe Flash icon name.
        /// </summary>
        public static readonly string AdobeFlash = "Adobe Flash";

        /// <summary>
        /// Represents the Sketch icon name.
        /// </summary>
        public static readonly string Sketch = "Sketch";

        /// <summary>
        /// Represents the Source Code icon name.
        /// </summary>
        public static readonly string SourceCode = "Source Code";

        /// <summary>
        /// Represents the Image icon name.
        /// </summary>
        public static readonly string Image = "Image";

        /// <summary>
        /// Represents the GIF icon name.
        /// </summary>
        public static readonly string GIF = "GIF";

        /// <summary>
        /// Represents the Video icon name.
        /// </summary>
        public static readonly string Video = "Video";

        /// <summary>
        /// Represents the Sound icon name.
        /// </summary>
        public static readonly string Sound = "Sound";

        /// <summary>
        /// Represents the ZIP icon name.
        /// </summary>
        public static readonly string ZIP = "ZIP";

        /// <summary>
        /// Represents the Text icon name.
        /// </summary>
        public static readonly string Text = "Text";

        /// <summary>
        /// Represents the PDF icon name.
        /// </summary>
        public static readonly string PDF = "PDF";
    }
}
