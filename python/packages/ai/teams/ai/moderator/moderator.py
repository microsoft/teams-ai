"""
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the MIT License.
"""

from typing import Generic, Optional, TypeVar

from botbuilder.core import TurnContext

from teams.ai.planner import Plan
from teams.ai.prompts import PromptTemplate
from teams.ai.state import TurnState

StateT = TypeVar("StateT", bound=TurnState)


class Moderator(Generic[StateT]):
    """
    Default moderator created by the AI system if one isn't configured.
    The default moderator is a pass-through and always approves all inputs and outputs.
    """

    async def review_prompt(
        self, _context: TurnContext, _state: StateT, _prompt: PromptTemplate
    ) -> Optional[Plan]:
        """
        Reviews user input before it's sent to the planner.

        Args:
            context (TurnContext): The turn context.
            state (StateT): The turn state.
            prompt (PromptTemplate): The prompt.

        Returns:
            Optional[Plan]: Returns None if the moderator approves the input,
            otherwise returns a new plan to bypass the planner and redirects to
            a new set of actions. Typically the moderator will return a new plan
            with a single DO command that calls `AI.FlaggedInputActionName`
            to flag the input for review.
        """
        return None

    async def review_plan(self, _context: TurnContext, _state: StateT, plan: Plan) -> Plan:
        """
        Reviews a plan generated by the planner before its executed.

        Args:
            context (TurnContext): The turn context
            state (StateT): The turn state
            plan (Plan): The plan to review.

        Returns:
            Plan: Returns the same plan if the moderator approves the plan,
            otherwise returns a new plan that redirects to a new set of actions.
            Typically the moderator will return a new plan with a single DO command
            that calls `AI.FlaggedOutputActionName` to flag the output for review.
        """
        return plan
