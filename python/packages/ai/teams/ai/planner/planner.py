"""
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the MIT License.
"""

from abc import ABC, abstractmethod
from logging import Logger
from typing import Any, Awaitable, Callable, Optional, Union

from botbuilder.core import TurnContext

from teams.ai.ai_history_options import AIHistoryOptions
from teams.ai.prompts import PromptTemplate
from teams.ai.state import TurnState

from .plan import Plan


class Planner(ABC):
    """
    interface implemented by all planners
    """

    log: Optional[Logger] = None

    @abstractmethod
    async def generate_plan(
        self,
        turn_context: TurnContext,
        state: TurnState,
        prompt_name_or_template: Union[str, PromptTemplate],
        *,
        history_options: AIHistoryOptions,
    ) -> Plan:
        """
        Generates a plan based on the given turn state and prompt name or template.

        Args:
            turn_context (TurnContext): The turn context for current turn of conversation
            state (TurnState): The current turn state.
            prompt_name_or_template (Union[str, PromptTemplate]): The name of the prompt or a
            prompt template to use.
            history_options (AIHistoryOptions): The options for the AI history.

        Returns:
            Plan: The generated plan.
        """

    @abstractmethod
    def add_function(
        self,
        name: str,
        handler: Callable[[TurnContext, TurnState], Awaitable[Any]],
        *,
        allow_overrides=False,
    ) -> None:
        """
        Adds a custom function to be used when rendering prompt templates.

        Args:
            name (str): The name of the function.
            handler (Callable[[TurnContext, TurnState], Any]): The business logic for the function.
            allow_overrides (bool, optional): Whether to allow overriding an existing function.
            Defaults to False.
        """

    @abstractmethod
    async def review_prompt(
        self,
        context: TurnContext,
        state: TurnState,
        prompt: PromptTemplate,
    ) -> Optional[Plan]:
        """
        Reviews user input before it's sent to the planner.

        ```python
        # Use this method as a decorator
        @app.ai.review_prompt
        async def on_review_prompt(context: TurnContext, state: TurnState, prompt: PromptTemplate):
            return None

        # Pass a function to this method
        app.ai.review_prompt(on_review_prompt)
        ```

        Args:
            context (TurnContext): The turn context.
            state (StateT): The turn state.
            prompt (PromptTemplate): The prompt.

        Returns:
            Optional[Plan]: Returns None if the moderator approves the input,
            otherwise returns a new plan to bypass the planner and redirects to
            a new set of actions. Typically the moderator will return a new plan
            with a single DO command that calls `AI.FlaggedInputActionName`
            to flag the input for review.
        """

    @abstractmethod
    async def review_plan(
        self,
        context: TurnContext,
        state: TurnState,
        plan: Plan,
        model: str,
    ) -> Plan:
        """
        Reviews a plan generated by the planner before its executed.

        ```python
        # Use this method as a decorator
        @app.ai.review_plan
        async def on_review_plan(context: TurnContext, state: TurnState, plan: Plan):
            return plan

        # Pass a function to this method
        app.ai.review_plan(on_review_plan)
        ```

        Args:
            context (TurnContext): The turn context
            state (StateT): The turn state
            plan (Plan): The plan to review.

        Returns:
            Plan: Returns the same plan if the moderator approves the plan,
            otherwise returns a new plan that redirects to a new set of actions.
            Typically the moderator will return a new plan with a single DO command
            that calls `AI.FlaggedOutputActionName` to flag the output for review.
        """
