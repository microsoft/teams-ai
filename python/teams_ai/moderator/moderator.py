"""
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the MIT License.
"""

from abc import ABC, abstractclassmethod
from typing import Optional

class Moderator(ABC):
    """
    interface implemented by all moderators
    """

    @abstractclassmethod
    async def review_prompt(input: str) -> Optional[Plan]:
        """
        Reviews user input before it's sent to the planner.

        Args:
            input (str): The content to review.
        
        Returns:
            Optional[Plan]: Returns None if the moderator approves the input, otherwise returns a new plan to bypass the planner and redirects to a new set of actions. Typically the moderator will return a new plan with a single DO command that calls `AI.FlaggedInputActionName` to flag the input for review.
        """
        pass

    @abstractclassmethod
    async def review_plan(plan: Plan) -> Plan:
        """
        Reviews a plan generated by the planner before its executed.

        Args:
            plan (Plan): The plan to review.

        Returns:
            Plan: Returns the same plan if the moderator approves the plan, otherwise returns a new plan that redirects to a new set of actions. Typically the moderator will return a new plan with a single DO command that calls `AI.FlaggedOutputActionName` to flag the output for review.
        """
        pass