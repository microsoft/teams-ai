/**
 * @module teams-ai
 */
/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */

import { ActivityTypes, Channels, TurnContext } from 'botbuilder';

import { TurnState } from '../TurnState';
import { PredictedSayCommand } from '../planners';
import { Utilities } from '../Utilities';

export interface ClientCitation {
    /**
     * Must be "Claim"
     */
    '@type': string;

    /**
     * Required. Number and position of the citation.
     */
    position: string;
    appearance: {
        /**
         * Required; Must be 'DigitalDocument'
         */
        '@type': string; // Required; Must be 'DigitalDocument'

        /**
         * Name of the document.
         */
        name: string;

        /**
         * Optional; ignored in Teams
         */
        text?: string;

        /**
         * URL of the document.
         */
        url: string;

        /**
         * Content of the citation. Should be clipped if longer than ~500 characters.
         */
        abstract: string;

        /**
         * Used for icon; for now it is ignored.
         */
        encodingFormat?: 'text/html';

        /**
         * For now ignored, later used for icon
         */
        image?: string;

        /**
         * Optional; set by developer
         */
        keywords?: string[];

        /**
         * Optional sensitivity content information.
         */
        usageInfo?: SensitivityUsageInfo;
    };
}

/**
 * Sensitivity Usage info for content sent to the user. This is used to provide information about the content to the user.
 */
export interface SensitivityUsageInfo {
    /**
     * Must be "https://schema.org/Message"
     */
    type: string;

    /**
     * Set to CreativeWork;
     */
    '@type': string;

    /**
     * Sensitivity description of the content
     */
    description?: string;

    /**
     * Sensitivity title of the content
     */
    name: string;

    /**
     * Optional; ignored in Teams.
     */
    position?: number;

    pattern?: {
        /**
         * Set to DefinedTerm
         */
        '@type': string;

        inDefinedTermSet: string;

        /**
         * Color
         */
        name: string;

        /**
         * e.g. #454545
         */
        termCode: string;
    };
}

/**
 * @param feedbackLoopEnabled
 * @private
 */
export function sayCommand<TState extends TurnState = TurnState>(feedbackLoopEnabled: boolean = false) {
    return async (context: TurnContext, _state: TState, data: PredictedSayCommand) => {
        if (!data.response?.content) {
            return '';
        }

        let content = data.response.content;
        const isTeamsChannel = context.activity.channelId === Channels.Msteams;

        if (isTeamsChannel) {
            content = content.split('\n').join('<br>');
        }

        // If the response from AI includes citations, those citations will be parsed and added to the SAY command.
        let citations: ClientCitation[] | undefined = undefined;

        if (data.response.context && data.response.context.citations.length > 0) {
            citations = data.response.context!.citations.map((citation, i) => {
                return {
                    '@type': 'Claim',
                    position: `${i + 1}`,
                    appearance: {
                        '@type': 'DigitalDocument',
                        name: citation.title,
                        url: citation.url,
                        abstract: Utilities.snippet(citation.content, 500)
                    }
                };
            });
        }

        await context.sendActivity({
            type: ActivityTypes.Message,
            // If there are citations, modify the content so that the sources are numbers instead of [doc1], [doc2], etc.
            text: !citations ? content : Utilities.formatCitationsResponse(content),
            channelData: isTeamsChannel ? { feedbackLoopEnabled } : undefined,
            entities: [
                {
                    type: 'https://schema.org/Message',
                    '@type': 'Message',
                    '@context': 'https://schema.org',
                    /**
                     * Must be left blank. This is for Bot Framework schema.
                     */
                    '@id': '',
                    /**
                     * Indicate that the content was generated by AI.
                     */
                    additionalType: ['AIGeneratedContent'],
                    citation: citations
                }
            ]
        });

        return '';
    };
}
