/**
 * @module teams-ai
 */
/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */

import { ActivityTypes, Channels, TurnContext } from 'botbuilder';

import { PredictedSayCommand } from '../planners';
import { TurnState } from '../TurnState';
import { Utilities } from '../Utilities';

export interface AIEntity {
    /**
     * Required as 'https://schema.org/Message'
     */
    type: 'https://schema.org/Message';

    /**
     * Required as 'Message
     */
    '@type': 'Message';

    /**
     * Required as 'https://schema.org
     */
    '@context': 'https://schema.org';

    /**
     * Must be left blank. This is for Bot Framework schema.
     */
    '@id': '';

    /**
     * Indicate that the content was generated by AI.
     */
    additionalType: ['AIGeneratedContent'];

    /**
     * Optional; if citations object is included, the  sent activity will include the citations, referenced in the activity text.
     */
    citation?: ClientCitation[];
}
export interface ClientCitation {
    /**
     * Required; must be "Claim"
     */
    '@type': 'Claim';

    /**
     * Required. Number and position of the citation.
     */
    position: string;
    appearance: {
        /**
         * Required; Must be 'DigitalDocument'
         */
        '@type': 'DigitalDocument';

        /**
         * Name of the document.
         */
        name: string;

        /**
         * Optional; ignored in Teams
         */
        text?: string;

        /**
         * URL of the document. This will make the name of the citation clickable and direct the user to the specified URL.
         */
        url?: string;

        /**
         * Content of the citation. Should be clipped if longer than ~500 characters.
         */
        abstract: string;

        /**
         * Used for icon; for now it is ignored.
         */
        encodingFormat?: 'text/html';

        /**
         * For now ignored, later used for icon
         */
        image?: string;

        /**
         * Optional; set by developer
         */
        keywords?: string[];

        /**
         * Optional sensitivity content information.
         */
        usageInfo?: SensitivityUsageInfo;
    };
}

/**
 * Sensitivity usage info for content sent to the user. This is used to provide information about the content to the user.
 */
export interface SensitivityUsageInfo {
    /**
     * Must be "https://schema.org/Message"
     */
    type: 'https://schema.org/Message';

    /**
     * Required; Set to CreativeWork;
     */
    '@type': 'CreativeWork';

    /**
     * Sensitivity description of the content
     */
    description?: string;

    /**
     * Sensitivity title of the content
     */
    name: string;

    /**
     * Optional; ignored in Teams.
     */
    position?: number;

    pattern?: {
        /**
         * Set to DefinedTerm
         */
        '@type': 'DefinedTerm';

        inDefinedTermSet: string;

        /**
         * Color
         */
        name: string;

        /**
         * e.g. #454545
         */
        termCode: string;
    };
}

/**
 * @private
 * @param {boolean} feedbackLoopEnabled - If true, the feedback loop UI for Teams will be enabled.
 * @returns {''} - An empty string.
 */
export function sayCommand<TState extends TurnState = TurnState>(feedbackLoopEnabled: boolean = false) {
    return async (context: TurnContext, _state: TState, data: PredictedSayCommand) => {
        if (!data.response?.content) {
            return '';
        }

        let content = data.response.content;
        const isTeamsChannel = context.activity.channelId === Channels.Msteams;

        if (isTeamsChannel) {
            content = content.split('\n').join('<br>');
        }

        // If the response from AI includes citations, those citations will be parsed and added to the SAY command.
        let citations: ClientCitation[] | undefined = undefined;

        if (data.response.context && data.response.context.citations.length > 0) {
            citations = data.response.context!.citations.map((citation, i) => {
                const clientCitation: ClientCitation = {
                    '@type': 'Claim',
                    position: `${i + 1}`,
                    appearance: {
                        '@type': 'DigitalDocument',
                        name: citation.title || `Document #${i + 1}`,
                        abstract: Utilities.snippet(citation.content, 500)
                    }
                };

                return clientCitation;
            });
        }

        // If there are citations, modify the content so that the sources are numbers instead of [doc1], [doc2], etc.
        const contentText = !citations ? content : Utilities.formatCitationsResponse(content);

        // If there are citations, filter out the citations unused in content.
        const referencedCitations = citations ? Utilities.getUsedCitations(contentText, citations) : undefined;

        await context.sendActivity({
            type: ActivityTypes.Message,
            text: contentText,
            ...(isTeamsChannel ? { channelData: { feedbackLoopEnabled } } : {}),
            entities: [
                {
                    type: 'https://schema.org/Message',
                    '@type': 'Message',
                    '@context': 'https://schema.org',
                    '@id': '',
                    additionalType: ['AIGeneratedContent'],
                    ...(referencedCitations ? { citation: referencedCitations } : {})
                }
            ] as AIEntity[]
        });

        return '';
    };
}
