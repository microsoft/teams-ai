# Chaining

1. [Prompts](./00.PROMPTS.md)
2. [Templates](./01.TEMPLATES.md)
3. [Actions](./02.ACTIONS.md)
4. [Plans](./03.PLANS.md)
5. [**Chaining**](./04.CHAINING.md)
6. [Storage](./05.STORAGE.md)
7. [Turns](./06.TURNS.md)

Chaining allows you to execute multiple `prompt plans` to orchestrate complex workflows.

- [Lang Chain](https://python.langchain.com/docs/modules/chains/)

## Examples

The following is how you can use an action to chain two prompts together.

We have two prompts, one to `chat` with the user and one to `summarize` our chat thus far.
From the `chat` prompt, we invoke the `summarize` action which chains to the `summarize` prompt.

#### Prompts

```
-- prompts
    -- chat
    -- summarize
```

#### promps/chat

```Prompt
human - what's in my grocery list
ai - DO summarize
```

#### Action

```C#
[Action("summarize")]
public async Task<bool> Summarize([ActionTurnContext] ITurnContext turnContext, [ActionTurnState] ListState turnState)
{
    await _application.AI.ChainAsync(turnContext, turnState, "summarize").ConfigureAwait(false);
    // End the current chain
    return false;
}
```

```typescript
app.ai.action('summarize', async (context: TurnContext, state: ApplicationTurnState, data: EntityData) => {
    await app.ai.chain(context, state, 'summarize');
    // End the current chain
    return false;
});
```