# Plans

1. [Prompts](./00.PROMPTS.md)
2. [Templates](./01.TEMPLATES.md)
3. [Actions](./02.ACTIONS.md)
4. [**Plans**](./03.PLANS.md)
5. [Chaining](./04.CHAINING.md)
6. [Storage](./05.STORAGE.md)
7. [Turns](./06.TURNS.md)

Takes a user's ask and returns back a plan on how to accomplish the request. It does so by using AI to mix-and-match the tools registered so that it can recombine them into a series of steps that complete a goal.

- [Semantic Kernel](https://learn.microsoft.com/en-us/semantic-kernel/ai-orchestration/planner)
- [Lang Chain](https://python.langchain.com/docs/modules/agents/agent_types/plan_and_execute)

## Commands

### DO

An `action` that the AI system should perform

### SAY

A `response` that the AI system should say

### Examples

The following is a `plan` that supports two simple commands. The `DO` command will send input to the app while the `SAY` command handles the response.

```json
{
    "type":"plan",
    "commands":[
        {"type":"DO","action":"<name>","entities":{"<name>":<value>}},
        {"type":"SAY","response":"<response>"}
    ]
}
```
