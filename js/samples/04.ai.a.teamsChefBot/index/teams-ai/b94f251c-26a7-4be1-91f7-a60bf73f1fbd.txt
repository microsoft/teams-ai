# Guidance on using this wrapper framework over the BotBuilder SDK

Previously, users developing bots for Teams and Microsoft 365 apps had to use the BotBuilder SDK directly. This SDK is designed to help you build bots that can interact with Teams and Microsoft 365 apps.

While one of the exciting features of this SDK is the AI support that customers will be able to migrate to, your team's first goals might be simply update your current bot without AI.

These directions will apply both to non-AI and AI bot migration.

## Convert to the Teams AI SDK

The first samples [C#](../dotnet/samples)] | [JS](../js/samples/)] available assist in migrating these features.

> Note: [Teams samples](https://github.com/OfficeDev/Microsoft-Teams-Samples) are currently available. These samples will be updated to use this SDK in the future.

### Update the ActivityHandler

Replace `BotActivityHandler` with `Application`

```diff

+ import { Application, ApplicationTurnState } from "@microsoft/teams-ai";

const storage = new MemoryStorage();
- const userState = new UserState(storage);
- const app = BotActivityHandler(userState);

+ const app =  new Application<ApplicationTurnState>({
  storage
});
```

> `ApplicationTurnState` is the default `TurnState` that includes `ConversationState`, `UserState`, and `TempState`

---

### 2. Message Extensions

The app class now has `messageExtensions` features to make creating the handler(s) simpler:

- `context` is `TurnContext` and `state` is `DefaultTurnState` passed in from the bot. The third parameter, in this case `query`, is the data passed from ME interaction.

```js
import { MessagingExtensionAttachment } from "botbuilder";
import { Application } from @microsoft/teams-ai";

// ME query Listener
app.messageExtensions.query("searchCmd", async (context, state, query) => {
  const searchQuery = query.parameters.queryText;
  // Other handling
  // e.g. Create search / action cards

  // Return results
  return {
    attachmentLayout: "",
    attachments: results,
    type: "result"
  };
});
```

Similarly, `selectItem` listener would be set up as:

```js
app.messageExtensions.selectItem(async (context, state, item) => {
  // Other handling
  // e.g. Create search / action cards
  // item is the card/item the user selected
  return {
    //...
  }

}
```

---

### Adaptive Cards capabilities

Similar to `app.messageExtensions` above, `app.AdaptiveCards` is the handler for producing Adaptive Cards.

```js
// Listener for messages from the user that trigger an adaptive card
app.message(/searchQuery/i, async (context, state) => {
  const attachment = createAdaptiveCard();
  await context.sendActivity({ attachments: [attachment] });
});

// Listener for action.submit on cards from the user

interface SubmitData {
  choiceSelect: string;
}

// Listen for submit actions from the user
app.adaptiveCards.actionSubmit("ChoiceSubmit", async (context, state, data: SubmitData) => {
  await context.sendActivity(`Submitted option is: ${data.choiceSelect}`);
});
```

Using the code examples above, developers can quickly migrate from using `'botbuilder'` SDK to a simpler `'teams-ai'` setup.

Please feel free to send us feedback.

Next, the exciting step is to add AI to your bot! Continue on to [01.AI-SETUP](01.AI-SETUP.md)

Otherwise, see below for in-depth explanation of porting-related concepts.

### Application turn flow

If you are familiar with botbuilder, you already know the basics of turn flow in Teams AI. The main differences are `beforeTurn`, `afterTurn`, and how AI fits into the system.
![diagram of Teams AI application flow](../assets/image.png)

1. The change in flow begins when an activity handler is not registered with the app. If that is the case, the turn context and turn state is passed to the AI module.
1. The AI module will determine its response via the prompt (which may include conversation history)
   - `app.ai.action('___', ...)` is the code for a specific action.
1. The AI module generates a plan of actions on what to do with the response that was generated. (More details provided in <a href="#what-ties-the-ai-module-together-action-mapping">AI Module</a> section)
1. The module will execute those actions, and fill its response (`$output`) with the appropriate data.
1. The response is passed to `afterTurn`, which includes:
   - `$history` - [AI or conversation history,](#ai-memory-history) the length (number of turns) of which is determined by the prompt configuration
   - `$input` - the user's original input
   - `$output` - the generated response by the AI
1. `afterTurn` is intended to be used for cleanup after the response has been sent.

Note that Bot memory and AI memory are distinct.

### Bot memory

> Bot memory and AI memory are separate. Bot memory stores data for the bot to use, while AI memory stores AI data.

- `$conversation.<prop>` - bot conversation memory
- `$user.<prop>` - bot user memory
- `$temp.<prop>` - bot temp memory (data kept for 1 turn only)
  - `$<prop>` may be used as an alias for `$temp.<prop>`

## AI memory (`$history`)

> AI bot memory may store context/information for as little as 1 turn, while bot memory may be used to store information for the lifetime of the conversation.

> Unlike bot memory, AI memory consumes tokens and therefore is more expensive, but keeping a shorter `$history` may cause more frequent hallucinations from the AI.

- `$history` - conversation history tracked by AI (not related to bot's conversation history see [Bot memory](#bot-memory))
- `$input` - input from the prompt, such as `activity.text`
- `$output` - the last executed function's output. You reference this output in code as `state.temp.value.output`
- Hallucinatiion - when the AI creates an independant context/response that does not match the app's use-cases.
- Parent prompt: when executing chaining, the output from the child prompt may be directly passed to the parent prompt:

### Creating a function

```js
app.ai.prompts.addFunction("getUserName", async (context, state) => {
  return context.activity.from.name;
});
```

In your prompt(s) text file, reference the above function as `{{getUserName}}`

### Chaining prompts

```js
app.ai.prompts.addFunction("translateInputToEnglish", app.ai.createSemanticFunction("translationPrompt"));
```

The child prompt passes its `$output` to the parent (`translationPrompt`)

### Calling (prompt) function in code

```js
const result = await app.ai.completePrompt(context, state, "myPrompt");
```

## What ties the AI module together: Action Mapping

`app.ai.chain` is utilized when the Planner recieves an input that did not trigger an activity handler, and instead generates and implements a plan. That plan is the list of directions that the LLM will follow according to the predicted action from the user's input. For example, in action mapping LightBot, the following excerpt is a section of the plan:

### DO and SAY

```txt
The assistant must return the following JSON structure:

{"type":"plan","commands":[{"type":"DO","action":"<name>","entities":{"<name>":<value>}},{"type":"SAY","response":"<response>"}]}

The following actions are supported:

- LightsOn
- LightsOff
- Pause time=<duration in ms>
- LightStatus
```

The first two lines of directions asserts that the AI _must_ return its response in JSON format. This means that `$output` will return JSON, and therefore be parsable in a predictable way.

- The JSON provided is minified to reduce token ussage
- There are two types of commands: `DO` and `SAY`

The commands are provided as an array to perform in order.

- `DO` is an action defined by your code in `ai.prompts`:

```
app.ai.prompts.addFunction(
    'getLightStatus',
    async (context: TurnContext, state: ApplicationTurnState) => {
        return state.conversation.value.lightsOn ? 'on' : 'off';
    }
);
```

These are programmatic methods not defined in natural language, but in your code.

- In the prompt above, the performable `DO` actions are `LightsOn`, `LightsOff`, `Pause`, and `LightStatus`
- `SAY` is a response to add to the conversation, exactly like the response from a bot.

### Using RegExp to match user input

If, for example, a user wants to reset the conversation, a command like 'reset' may be created. However, there are any number of ways the user might call reset, as well as ways that the developer does not want to consider valid. The following is a fairly comprehensive RegExp that can cover many scenarios.

RegExp: `
For details and coverage on this regex, visit this [regex101 link](https://regex101.com/r/b5ZwAY/6) which covers and tests 'reset' and 'restart' inputs from the user.

```js
const resetRegex = `/^(?:.*\s)?\/(reset|restart)|^(reset|restart)\(?\)?$/i`;
app.message(resetRegex, async (context, state) => {
  state.conversation.delete();
  await context.sendActivity(`Ok I have deleted the conversation history.`);
});
```

You may replace `reset|restart` with whatever word(s) desired, of course. Usage of regex is not required, but may be helpful in covering many scenarios that result in the same action.
