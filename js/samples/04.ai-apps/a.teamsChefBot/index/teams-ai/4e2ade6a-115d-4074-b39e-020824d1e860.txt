# Migrating from Bot Framework (BF) SDK to Teams AI

<small>Getting started directory</small>

1. [**Migration**](./00.MIGRATION.md)
2. [AI Setup](./01.AI-SETUP.md)
3. [Activity Routing](./02.ACTIVITY-ROUTING.md)
4. [QNA](./03.QNA.md)
5. [Other](../OTHER/README.md)

Previously, users developing bots for Teams and Microsoft 365 apps had to use the BotBuilder SDK directly. This library is designed to help you build bots that can interact with Teams and Microsoft 365 apps.

While one of the exciting features of this library is the AI support that customers will be able to migrate to, your team's first goals might be simply update your current bot.

If you have a bot built using the BF SDK, the following will help you update your bot to the Teams AI library.

### 1. Update the ActivityHandler

Replace `BotActivityHandler` with `Application`

```diff

+ import { Application, ApplicationTurnState } from "@microsoft/teams-ai";

const storage = new MemoryStorage();
- const userState = new UserState(storage);
- const app = BotActivityHandler(userState);

+ const app =  new Application<ApplicationTurnState>({
  storage
});
```

> `ApplicationTurnState` is the default `TurnState` that includes `ConversationState`, `UserState`, and `TempState`

#### Optional ApplicationBuilder Class

You may also use the `ApplicationBuilder` class to instantiate your `Application` instance. This option provides greater readability and separates the management of the various configuration options (e.g., storage, turn state, AI module options, etc).

Follow [this example](#optional-applicationbuilder-class-example) to learn more.

---

### 2. Message Extensions

The app class now has `messageExtensions` features to make creating the handler(s) simpler:

- `context` is `TurnContext` and `state` is `DefaultTurnState` passed in from the bot. The third parameter, in this case `query`, is the data passed from ME interaction.

```js
import { MessagingExtensionAttachment } from "botbuilder";
import { Application } from @microsoft/teams-ai";

// ME query Listener
app.messageExtensions.query("searchCmd", async (context, state, query) => {
  const searchQuery = query.parameters.queryText;
  // Other handling
  // e.g. Create search / action cards

  // Return results
  return {
    attachmentLayout: "",
    attachments: results,
    type: "result"
  };
});
```

Similarly, `selectItem` listener would be set up as:

```js
app.messageExtensions.selectItem(async (context, state, item) => {
  // Other handling
  // e.g. Create search / action cards
  // item is the card/item the user selected
  return {
    //...
  }

}
```

---

### 3. Adaptive Cards capabilities

Similar to `app.messageExtensions` above, `app.AdaptiveCards` is the handler for producing Adaptive Cards.

```js
// Listener for messages from the user that trigger an adaptive card
app.message(/searchQuery/i, async (context, state) => {
  const attachment = createAdaptiveCard();
  await context.sendActivity({ attachments: [attachment] });
});

// Listener for action.submit on cards from the user

interface SubmitData {
  choiceSelect: string;
}

// Listen for submit actions from the user
app.adaptiveCards.actionSubmit("ChoiceSubmit", async (context, state, data: SubmitData) => {
  await context.sendActivity(`Submitted option is: ${data.choiceSelect}`);
});
```

### Optional ApplicationBuilder Class Example

js `index.ts`:

```js
// Old method:
// const app = new Application()<ApplicationTurnState>
//    {
//        storage
//    };

const app = new ApplicationBuilder()<ApplicationTurnState>
    .withStorage(storage)
    .build(); // this function internally calls the Application constructor
```
