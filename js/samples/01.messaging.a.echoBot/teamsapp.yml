# yaml-language-server: $schema=https://aka.ms/teams-toolkit/1.0.0/yaml.schema.json
#
# The teamsapp.yml composes automation tasks for Teams Toolkit when running other environment configurations.
# This file is used when selecting the Provision, Deploy, or Publish menu items in the Teams Toolkit for Visual Studio Code window
# or with the TeamsFx CLI commands.
# i.e. `teamsfx provision --env {environment name}` or `teamsfx deploy --env {environment name}`.
#
# You can customize this file. Visit https://aka.ms/teamsfx-v5.0-guide for more info about Teams Toolkit project files.
version: 1.0.0

environmentFolderPath: ./env

# Defines what the `provision` lifecycle step does with Teams Toolkit.
# Runs with the Provision menu or CLI using `teamsfx provision --env {environment name}`.
provision:
  # Automates the creation of a Teams app registration and saves the App ID to an environment file.
  - uses: teamsApp/create
    with:
      name: EchoBot-${{TEAMSFX_ENV}}
    writeToEnvironmentFile:
      teamsAppId: TEAMS_APP_ID

  # Automates the creation an Azure AD app registration which is required for a bot.
  # The Bot ID (AAD app client ID) and Bot Password (AAD app client secret) are saved to an environment file.
  - uses: botAadApp/create
    with:
      name: EchoBot-${{TEAMSFX_ENV}}
    writeToEnvironmentFile:
      botId: BOT_ID
      botPassword: SECRET_BOT_PASSWORD

  # Automates the creation of infrastructure defined in ARM templates to host the bot.
  # The created resource IDs are saved to an environment file.
  - uses: arm/deploy
    with:
      subscriptionId: ${{AZURE_SUBSCRIPTION_ID}}
      resourceGroupName: ${{AZURE_RESOURCE_GROUP_NAME}}
      templates:
        - path: ./infra/azure.bicep
          parameters: ./infra/azure.parameters.json
          deploymentName: Create-resources-for-tab
      bicepCliVersion: v0.9.1

  # Optional: Automates schema and error checking of the Teams app manifest and outputs the results in the console.
  - uses: teamsApp/validateManifest
    with:
      manifestPath: ./appPackage/manifest.json

  # Automates creating a final app package (.zip) by replacing any variables in the manifest.json file for the current environment.
  - uses: teamsApp/zipAppPackage
    with:
      manifestPath: ./appPackage/manifest.json
      outputZipPath: ./appPackage/build/appPackage.${{TEAMSFX_ENV}}.zip
      outputJsonPath: ./appPackage/build/manifest.${{TEAMSFX_ENV}}.json

  # Optional: Automates an app package check for errors that would prevent the app from being published and reports any problems.
  - uses: teamsApp/validateAppPackage
    with:
      appPackagePath: ./appPackage/build/appPackage.${{TEAMSFX_ENV}}.zip

  # Automates updating the Teams app manifest in Teams Developer Portal using the App ID from the mainfest file.
  # This action ensures that any manifest changes are reflected when launching the app again in Teams.
  - uses: teamsApp/update
    with:
      appPackagePath: ./appPackage/build/appPackage.${{TEAMSFX_ENV}}.zip

# Defines what the `deploy` lifecycle step does with Teams Toolkit.
# Runs with the Deploy menu or CLI using `teamsfx deploy --env {environment name}`.
deploy:
  # Install any dependencies and build the web app using NPM
  - uses: cli/runNpmCommand
    name: install dependencies
    with:
      args: install

  - uses: cli/runNpmCommand
    name: build app
    with:
      args: run build --if-present

  # Deploy to an Azure App Service using the zip file created in the provision step.
  - uses: azureAppService/zipDeploy
    with:
      artifactFolder: .
      ignoreFile: .webappignore
      # This example uses the env var thats generated by the arm/deploy action.
      # You can replace it with an existing Azure Resource ID or other
      # custom environment variable.
      resourceId: ${{BOT_AZURE_APP_SERVICE_RESOURCE_ID}}

# Defines what the `publish` lifecycle step does with Teams Toolkit.
# Runs with the Deploy menu or CLI using `teamsfx publish --env {environment name}`.
publish:
  # Optional: Automates schema and error checking of the Teams app manifest and outputs the results in the console.
  - uses: teamsApp/validateManifest
    with:
      manifestPath: ./appPackage/manifest.json

  # Automates creating a final app package (.zip) by replacing any variables in the manifest.json file for the current environment.
  - uses: teamsApp/zipAppPackage
    with:
      manifestPath: ./appPackage/manifest.json
      outputZipPath: ./appPackage/build/appPackage.${{TEAMSFX_ENV}}.zip
      outputJsonPath: ./appPackage/build/manifest.${{TEAMSFX_ENV}}.json

  # Optional: Automates an app package check for errors that would prevent the app from being published and reports any problems.
  - uses: teamsApp/validateAppPackage
    with:
      appPackagePath: ./appPackage/build/appPackage.${{TEAMSFX_ENV}}.zip

  # Automates updating the Teams app manifest in Teams Developer Portal using the App ID from the mainfest file.
  # This action ensures that any manifest changes are reflected when launching the app again in Teams.
  - uses: teamsApp/update
    with:
      appPackagePath: ./appPackage/build/appPackage.${{TEAMSFX_ENV}}.zip
